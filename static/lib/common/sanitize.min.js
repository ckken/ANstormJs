/**
 Author: Gabriel Birke (mailto:gabriel@lebenplusplus.de)
 Version: 1.0
 Copyright: Copyright (c) 2010 Gabriel Birke. All rights reserved.
 License: MIT License (http://opensource.org/licenses/mit-license.php)
 Website: http://github.com/gbirke/Sanitize.js
 **/
function Sanitize(c) {
    var a;
    a = c || {};
    this.config = {};
    this.config.elements = a.elements ? a.elements : [];
    this.config.attributes = a.attributes ? a.attributes : {};
    this.config.attributes[Sanitize.ALL] = this.config.attributes[Sanitize.ALL] ? this.config.attributes[Sanitize.ALL] : [];
    this.config.allow_comments = a.allow_comments ? a.allow_comments : !1;
    this.allowed_elements = {};
    this.config.protocols = a.protocols ? a.protocols : {};
    this.config.add_attributes = a.add_attributes ? a.add_attributes : {};
    this.dom = a.dom ? a.dom : document;
    for (c = 0; c <
        this.config.elements.length; c++)this.allowed_elements[this.config.elements[c]] = !0;
    this.config.remove_element_contents = {};
    this.config.remove_all_contents = !1;
    if (a.remove_contents)if (a.remove_contents instanceof Array)for (c = 0; c < a.remove_contents.length; c++)this.config.remove_element_contents[a.remove_contents[c]] = !0; else this.config.remove_all_contents = !0;
    this.transformers = a.transformers ? a.transformers : []
}
Sanitize.REGEX_PROTOCOL = /^([A-Za-z0-9\+\-\.\&\;\*\s]*?)(?:\:|&*0*58|&*x0*3a)/i;
Sanitize.RELATIVE = "__relative__";
Sanitize.prototype.clean_node = function (c) {
    function a(a, d) {
        var b;
        for (b = 0; b < d.length; b++)if (d[b] == a)return b;
        return-1
    }

    function l() {
        var a = [], d = {}, b, g;
        for (b = 0; b < arguments.length; b++)if (arguments[b] && arguments[b].length)for (g = 0; g < arguments[b].length; g++)d[arguments[b][g]] || (d[arguments[b][g]] = !0, a.push(arguments[b][g]));
        return a
    }

    function m(e) {
        var d;
        switch (e.nodeType) {
            case 1:
                var b, g, h, j, f, c, k;
                b = [];
                g = e;
                j = !1;
                for (h = 0; h < this.transformers.length; h++)if (f = this.transformers[h]({allowed_elements: this.allowed_elements, config: this.config,
                    node: e, node_name: e.nodeName.toLowerCase(), whitelist_nodes: this.whitelist_nodes, dom: this.dom}), null != f)if ("object" == typeof f) {
                    if (f.whitelist_nodes && f.whitelist_nodes instanceof Array)for (j = 0; j < f.whitelist_nodes.length; j++)-1 == a(f.whitelist_nodes[j], this.whitelist_nodes) && this.whitelist_nodes.push(f.whitelist_nodes[j]);
                    j = f.whitelist ? !0 : !1;
                    f.attr_whitelist && (b = l(b, f.attr_whitelist));
                    g = f.node ? f.node : g
                } else throw Error("transformer output must be an object or null");
                e = g;
                h = e.nodeName.toLowerCase();
                g = this.current_element;
                if (this.allowed_elements[h] || j) {
                    this.current_element = this.dom.createElement(e.nodeName);
                    g.appendChild(this.current_element);
                    j = this.config.attributes;
                    j = l(j[h], j.__ALL__, b);
                    for (b = 0; b < j.length; b++)if (d = j[b], f = e.attributes[d])c = !0, this.config.protocols[h] && this.config.protocols[h][d] && (c = this.config.protocols[h][d], c = (k = f.nodeValue.toLowerCase().match(Sanitize.REGEX_PROTOCOL)) ? -1 != a(k[1], c) : -1 != a(Sanitize.RELATIVE, c)), c && (c = document.createAttribute(d), c.value = f.nodeValue, this.current_element.setAttributeNode(c));
                    if (this.config.add_attributes[h])for (d in this.config.add_attributes[h])c = document.createAttribute(d), c.value = this.config.add_attributes[h][d], this.current_element.setAttributeNode(c)
                } else if (-1 != a(e, this.whitelist_nodes)) {
                    for (this.current_element = e.cloneNode(!0); 0 < this.current_element.childNodes.length;)this.current_element.removeChild(this.current_element.firstChild);
                    g.appendChild(this.current_element)
                }
                if (!this.config.remove_all_contents && !this.config.remove_element_contents[h])for (b = 0; b < e.childNodes.length; b++)m.call(this,
                    e.childNodes[b]);
                this.current_element.normalize && this.current_element.normalize();
                this.current_element = g;
                break;
            case 3:
                d = e.cloneNode(!1);
                this.current_element.appendChild(d);
                break;
            case 5:
                d = e.cloneNode(!1);
                this.current_element.appendChild(d);
                break;
            case 8:
                this.config.allow_comments && (d = e.cloneNode(!1), this.current_element.appendChild(d));
                break;
            default:
                console && console.log && console.log("unknown node type", e.nodeType)
        }
    }

    var k = this.dom.createDocumentFragment();
    this.current_element = k;
    this.whitelist_nodes =
        [];
    for (i = 0; i < c.childNodes.length; i++)m.call(this, c.childNodes[i]);
    k.normalize && k.normalize();
    return k
};
Sanitize.Config || (Sanitize.Config = {});
Sanitize.Config.BASIC = {elements: "a b blockquote br cite code dd dl dt em i li ol p pre q small strike strong sub sup u ul".split(" "), attributes: {a: ["href"], blockquote: ["cite"], q: ["cite"]}, add_attributes: {a: {rel: "nofollow"}}, protocols: {a: {href: ["ftp", "http", "https", "mailto", Sanitize.RELATIVE]}, blockquote: {cite: ["http", "https", Sanitize.RELATIVE]}, q: {cite: ["http", "https", Sanitize.RELATIVE]}}};
Sanitize.Config.RELAXED = {elements: "a b blockquote br caption cite code col colgroup dd dl dt em h1 h2 h3 h4 h5 h6 i img li ol p pre q small strike strong sub sup table tbody td tfoot th thead tr u ul div".split(" "), attributes: {a: ["href", "title"], blockquote: ["cite"], col: ["span", "width"], colgroup: ["span", "width"], img: "align alt height src title width".split(" "), ol: ["start", "type"], q: ["cite"], table: ["summary", "width"], td: ["abbr", "axis", "colspan", "rowspan", "width"], th: "abbr axis colspan rowspan scope width".split(" "),
    ul: ["type"], div: ["class"]}, protocols: {a: {href: ["ftp", "http", "https", "mailto", Sanitize.RELATIVE]}, blockquote: {cite: ["http", "https", Sanitize.RELATIVE]}, img: {src: ["http", "https", Sanitize.RELATIVE]}, q: {cite: ["http", "https", Sanitize.RELATIVE]}}};
Sanitize.Config.RESTRICTED = {elements: ["b", "em", "i", "strong", "u"]};
